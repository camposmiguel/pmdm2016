package com.miguelcr.app.localdb;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "VUELO".
*/
public class VueloDao extends AbstractDao<Vuelo, Long> {

    public static final String TABLENAME = "VUELO";

    /**
     * Properties of entity Vuelo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property CodigoVuelo = new Property(1, String.class, "codigoVuelo", false, "CODIGO_VUELO");
        public final static Property FechaHora = new Property(2, java.util.Date.class, "fechaHora", false, "FECHA_HORA");
        public final static Property IdAirline = new Property(3, long.class, "idAirline", false, "ID_AIRLINE");
    };


    public VueloDao(DaoConfig config) {
        super(config);
    }
    
    public VueloDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"VUELO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"CODIGO_VUELO\" TEXT NOT NULL ," + // 1: codigoVuelo
                "\"FECHA_HORA\" INTEGER NOT NULL ," + // 2: fechaHora
                "\"ID_AIRLINE\" INTEGER NOT NULL );"); // 3: idAirline
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"VUELO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Vuelo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getCodigoVuelo());
        stmt.bindLong(3, entity.getFechaHora().getTime());
        stmt.bindLong(4, entity.getIdAirline());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Vuelo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getCodigoVuelo());
        stmt.bindLong(3, entity.getFechaHora().getTime());
        stmt.bindLong(4, entity.getIdAirline());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Vuelo readEntity(Cursor cursor, int offset) {
        Vuelo entity = new Vuelo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // codigoVuelo
            new java.util.Date(cursor.getLong(offset + 2)), // fechaHora
            cursor.getLong(offset + 3) // idAirline
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Vuelo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCodigoVuelo(cursor.getString(offset + 1));
        entity.setFechaHora(new java.util.Date(cursor.getLong(offset + 2)));
        entity.setIdAirline(cursor.getLong(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Vuelo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Vuelo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
